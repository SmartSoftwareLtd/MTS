@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-xs-5">
        <div class="tablecontainer" id="divFordataGrid">
            <table id="dataGridSales" class="table table-bordered table-striped"></table>
            <br />
        </div>
    </div>
    <div class="col-xs-5">
        <div class="tablecontainer" id="divFordataGrid">
            <table id="dataGridPurchase" class="table table-bordered table-striped"></table>
            <br />
        </div>
    </div>
</div>
    <div class="row">
        <div class="col-xs-4">
            <div class="tablecontainer" id="divFordataGrid">
                <table id="dataGridClearingCharges" class="table table-bordered table-striped"></table>

            </div>
        </div>
        <div class="col-xs-4">
            <div class="tablecontainer" id="divFordataGrid">
                <table id="dataGridRepairingCharges" class="table table-bordered table-striped"></table>
            </div>
        </div>
        <div class="col-xs-4">
            <div class="tablecontainer" id="divFordataGrid">
                <table id="dataGridImportDuty" class="table table-bordered table-striped"></table>

            </div>
        </div>   
    </div>











<br />
<br />
<input type="button" class="btn btn-success  input-group-sm" value="Print Report" id="btnPrint" style=" margin-left: 400px; " />



@*this grid is used to fill All Sales Records*@
<script>
    $(function () {

        //this grid is used to fill All Sales Records

        $('#dataGridSales').jqGrid({
            caption: "All Sales Records",
            url: '/IncomeAndExpenditure/GetAllSaleByLot/',
            datatype: "json",
            contentType: "application/json; charset-utf-8",
            mtype: 'GET',

            colNames: ['Sales Lot', 'Sales Amount', 'Units'],
            colModel: [
                { name: 'strLotName', index: 'strLotName', align: 'center' },
                { name: 'dmlSellingPrice', index: 'dmlSellingPrice', align: 'center' },
                 { name: 'iVehicleID', index: 'iVehicleID', align: 'center' },

            ],
            width: 'auto',
            height: 150,
            rowNum: 1000,
            loadonce: true,





        });
        jQuery("#dataGridSales").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });


    });







</script>


@*this grid is used to fill All Purchase Records*@
<script>
    $(function () {

        //this grid is used to fill All Purchase Records

        $('#dataGridPurchase').jqGrid({
            caption: "All Purchase Records",
            url: '/IncomeAndExpenditure/GetAllPurchaseByLot/',
            datatype: "json",
            contentType: "application/json; charset-utf-8",
            mtype: 'GET',

            colNames: ['Purchase Lot', 'AED', 'JPY', 'NoOfUnits'],
            colModel: [
                { name: 'strLotName', index: 'strLotName', align: 'center' },
                { name: 'dcmlAED', index: 'dcmlAED', align: 'center' },
                { name: 'dcmlJYP', index: 'dcmlJYP', align: 'center' },
                  { name: 'NoOfUnits', index: 'NoOfUnits', align: 'center' },

            ],
            width: 'auto',
            height: 150,
            rowNum: 1000,
            loadonce: true,




        });
        jQuery("#dataGridPurchase").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });


    });







</script>

@*this grid is used to fill All Expenses Records*@
<script>
    $(function () {

        //this grid is used to fill All Expenses Records

        $('#dataGridClearingCharges').jqGrid({
            caption: "All Clearing Charges Records",
            url: '/IncomeAndExpenditure/GetAllClearingChargesByLot/',
            datatype: "json",
            contentType: "application/json; charset-utf-8",
            mtype: 'GET',

            colNames: ['Expense Lot', 'Total Expense Amount','iVehicleID'],
            colModel: [
                { name: 'strLotName', index: 'strLotName', width: 200, align: 'center' },
                { name: 'dcmlTotalExpenseAmount', index: 'dcmlTotalExpenseAmount', width: 120, align: 'center' },
                { name: 'iVehicleID', index: 'iVehicleID', hidden: true, hidedlg: true },
            ],
            width: 'auto',
            height: 150,
            rowNum: 1000,
            loadonce: true,
            //rowList: [10, 20, 30],
            //pager: 'pagingGridExpense',




        });
        jQuery("#dataGridClearingCharges").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });
        //jQuery("#dataGridExpense").jqGrid('navGrid', '#pagingGridExpense', { edit: false, add: false, del: false, search: false });


    });

</script>



@*this grid is used to fill All Repairing Records*@
<script>
    $(function () {

        //this grid is used to fill All Expenses Records

        $('#dataGridRepairingCharges').jqGrid({
            caption: "All Repairing Charges Records",
            url: '/IncomeAndExpenditure/GetAllRepairingChargesByLot/',
            datatype: "json",
            contentType: "application/json; charset-utf-8",
            mtype: 'GET',

            colNames: ['Expense Lot', 'Total Expense Amount'],
            colModel: [
                { name: 'strLotName', index: 'strLotName', width: 200, align: 'center' },
                { name: 'dcmlTotalExpenseAmount', index: 'dcmlTotalExpenseAmount', width: 120, align: 'center' },
            ],
            width: 'auto',
            height: 150,
            rowNum: 1000,
            loadonce: true,
            //rowList: [10, 20, 30],
            //pager: 'pagingGridExpense',




        });
        jQuery("#dataGridRepairingCharges").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });
        //jQuery("#dataGridExpense").jqGrid('navGrid', '#pagingGridExpense', { edit: false, add: false, del: false, search: false });


    });

</script>


@*this grid is used to fill All Import Duty Records*@
<script>
    $(function () {

        //this grid is used to fill All Duty Records

        $('#dataGridImportDuty').jqGrid({
            caption: "All Import Duty Records",
            url: '/IncomeAndExpenditure/GetAllImportDutyByLot/',
            datatype: "json",
            contentType: "application/json; charset-utf-8",
            mtype: 'GET',

            colNames: ['Expense Lot', 'Total Import Duty','iVehicleID'],
            colModel: [
                { name: 'strLotName', index: 'strLotName', width: 200, align: 'center' },
                { name: 'dmlDuty', index: 'dmlDuty', width: 120, align: 'center' },
                { name: 'iVehicleID', index: 'iVehicleID', hidden:true, hidedlg:true },
            ],
            width: 'auto',
            height: 150,
            rowNum: 1000,
            loadonce: true,
            //rowList: [10, 20, 30],
            //pager: 'pagingGridExpense',




        });
        jQuery("#dataGridImportDuty").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: false, defaultSearch: "cn" });
        //jQuery("#dataGridExpense").jqGrid('navGrid', '#pagingGridExpense', { edit: false, add: false, del: false, search: false });


    });

</script>


<script>


    $("#btnPrint").click(function () {
        debugger
        //var totalSellingPrice = CalculateSellingPrice();
        //$('#hdnSellingPrice').val(totalSellingPrice);
        var grid1 = jQuery("#dataGridSales").getRowData();
        var grid2 = jQuery("#dataGridPurchase").getRowData();
        var grid3 = jQuery("#dataGridClearingCharges").getRowData();
        var grid4 = jQuery("#dataGridRepairingCharges").getRowData();
        var grid5 = jQuery("#dataGridImportDuty").getRowData();
        generateSalesReportPDF(grid1, grid2, grid3, grid4, grid5);
    });

    function generateSalesReportPDF(data1, data2, data3, data4, data5) {
        debugger

        //var griddata = jQuery("#dataGridByDate").getRowData();

        var doc = new jsPDF();

        var totalPagesExp = "{total_pages_count_string}";

        var griddata1 = data1;
        var griddata2 = data2;
        var griddata3 = data3;
        var griddata4 = data4;
        var griddata5 = data5;

        var columns = ['PARTICULARS', 'QTY', 'AMOUNT', 'AMOUNT', 'AMOUNT'];

        var data = [];

        //Adding No OF vehicle and Sum OF Selling Price
        var vehiclesAllUnitCount = 0;
        var sumOfSellingPrice = 0;

        for (var i = 0; i < griddata1.length; i++) {
            vehiclesAllUnitCount += parseInt(griddata1[i].iVehicleID);
            sumOfSellingPrice += parseFloat(griddata1[i].dmlSellingPrice);
        }


        data.push(['Total Sales 2016-MIKAWA', , , , , , ]);
        for (var i = 0; i < griddata1.length; i++) {
            if(i==1){
                data.push([griddata1[i].strLotName + ' = ' + griddata1[i].dmlSellingPrice + ' => ' + griddata1[i].iVehicleID, vehiclesAllUnitCount, '', sumOfSellingPrice]);
            
            }
            else {
                data.push([griddata1[i].strLotName + ' = ' + griddata1[i].dmlSellingPrice + ' => ' + griddata1[i].iVehicleID, '', '', '']);
            }
           
        }

        data.push([, , , , , , ]);
        data.push(['Total Purchase 2016-MIKAWA', , , , , , ]);

        //Adding Sum OF JPY
        var NoOfUnits = 0;
        var sumOfJPY = 0;

        for (var i = 0; i < griddata2.length; i++) {
            NoOfUnits += parseInt(griddata2[i].NoOfUnits);
            sumOfJPY += parseFloat(griddata2[i].dcmlJYP);
        }


        for (var i = 0; i < griddata2.length; i++) {
            if (i == 1) {
                data.push([griddata2[i].strLotName + ' = ' + griddata2[i].dcmlAED + '= ' + griddata2[i].dcmlJYP + ' => ' + griddata2[i].NoOfUnits, NoOfUnits, sumOfJPY, '']);
            }
            else {
                data.push([griddata2[i].strLotName + ' = ' + griddata2[i].dcmlAED + '= ' + griddata2[i].dcmlJYP + ' => ' + griddata2[i].NoOfUnits, '', '', '']);

            }
        }

        doc.setFillColor(200, 200, 255);
        doc.setFillColor(26, 188, 156);
        doc.setFontStyle('bold');
        //doc.setFontSize(16);

        //Calculating Gross Profit
        var grossProfit = sumOfSellingPrice - sumOfJPY;

        data.push(['Gross Profitt', , , , grossProfit]);
        var indexOfGross = data.length - 1;



        data.push([, , , , , , ]);
        data.push(['EXPENSES', , , , , , ]);
        var indexOfExpense = data.length - 1;

        data.push(['TOTAL CLEARING CHARGES 2016--(AnEXure-A)', 'XXX', 'XXX', , , , ]);
        data.push(['LESS:PREPAID CLEARING CHARGES 2016-MIKAWA', 'XXX', 'XXX', , , , ]);
        data.push(['Total Expenses 2016-MIKAWA', , , , , , ]);

        //Adding Total Expense Amount  For Clearing
        //var NoOfUnits = 0;
        var sumOfTotalExpenseAmount = 0;
        var allVehicle = 0;
        for (var i = 0; i < griddata3.length; i++) {
            allVehicle += parseInt(griddata3[i].iVehicleID);
            sumOfTotalExpenseAmount += parseFloat(griddata3[i].dcmlTotalExpenseAmount);
        }

        for (var i = 0; i < griddata3.length; i++) {
           
            if(i==1){
                data.push([griddata3[i].strLotName + ' = >' + griddata3[i].dcmlTotalExpenseAmount, allVehicle, '', sumOfTotalExpenseAmount]);
            }
            else {
                data.push([griddata3[i].strLotName + ' = >' + griddata3[i].dcmlTotalExpenseAmount, '', '', '']);
            }
            
        }
        data.push([, , , , , , ]);
        data.push(['TOTAL REPAIRING CHARGES 2016-MIKAWA', '', 'XXX', , , , ]);

        data.push(['LESS:PREPAID REPAIRING CHARGES 2016-MIKAWA', 'XXX', 'XXX', , , , ]);

        data.push(['Total REPAIRING CHARGES 2016-MIKAWA', , , , , , ]);



        //Adding Total Expense Amount For Repairing
        //var NoOfUnits = 0;
        var sumOfTotalExpenseAmountForRepairing = 0;

        for (var i = 0; i < griddata4.length; i++) {
            //NoOfUnits += parseInt(griddata3[i].NoOfUnits);
            sumOfTotalExpenseAmountForRepairing += parseFloat(griddata4[i].dcmlTotalExpenseAmount);
        }
        for (var i = 0; i < griddata4.length; i++) {
            if(i==1){
                data.push([griddata4[i].strLotName + ' = >' + griddata4[i].dcmlTotalExpenseAmount, '', '', sumOfTotalExpenseAmountForRepairing]);
            }
    else{
         data.push([griddata4[i].strLotName + ' = >' + griddata4[i].dcmlTotalExpenseAmount, '', '', '']);
        }
           

        }




        data.push([, , , , , , ]);       

        data.push(['Total IMPORT DUTY 2016-MIKAWA', , , , , , ]);



        //Adding Total Expense Amount For Repairing
        //var NoOfUnits = 0;
        var sumOfTotalImportDuty = 0;
        var importVehicleCount = 0;
        for (var i = 0; i < griddata5.length; i++) {
            //NoOfUnits += parseInt(griddata3[i].NoOfUnits);
            sumOfTotalImportDuty += parseFloat(griddata5[i].dmlDuty);
            importVehicleCount+=parseInt(griddata5[i].iVehicleID)
        }
        for (var i = 0; i < griddata5.length; i++) {
            if (i == 1) {
                data.push([griddata5[i].strLotName + ' = >' + griddata5[i].dmlDuty + ' = >' + griddata5[i].iVehicleID, importVehicleCount, '', sumOfTotalImportDuty]);
            }
            else {
                data.push([griddata5[i].strLotName + ' = >' + griddata5[i].dmlDuty + ' = >' + griddata5[i].iVehicleID, '', '', '']);
            }


        }


        //var fromDate = $("#fromDate").val();
        //var toDate = $("#toDate").val();
        //var sumOfSellingPrice = $('#hdnSellingPrice').val();

        //var custFullName = $("#hdnCustomerName").val();
        //var custAddr = $("#hdnCustomerAddress").val();
        //var custPhone = $("#hdnCustomerContactNumber").val();

        //data.push([, , , , , 'Total', sumOfSellingPrice]);

        //var d = new Date();

        //var month = d.getMonth() + 1;
        //var day = d.getDate();

        //var ReportDate = (('' + day).length < 2 ? '0' : '') + day + '/' + (('' + month).length < 2 ? '0' : '') + month + '/' + d.getFullYear();




        var pageContent = function (data) {
            // HEADER

            doc.setFontSize(20);
            doc.setTextColor(40);
            doc.setFontStyle('normal');

            //// You'll need to make your image into a Data URL
            //// Use http://dataurl.net/#dataurlmaker to convert image into data URL


            //if (imgData) {
            //    doc.addImage(imgData, 'JPEG', 0, 0, 300, 30)
            //   // doc.addImage(imgData, 'JPEG', data.settings.margin.left, 15, 10, 10);
            //}


            doc.text("INCOME FROM MIKAWA", data.settings.margin.left + 60, 10);
            doc.setFontSize(15);
            doc.text('For the Period Ending:', data.settings.margin.left + 60, 20);

            //doc.text(fromDate + '- ', data.settings.margin.left + 50, 50);
            //doc.text("To Dt:", data.settings.margin.left + 80, 50);
            //doc.text(toDate, data.settings.margin.left + 95, 50);
            //doc.text("Rprt Dt:", data.settings.margin.left + 125, 20);
            //doc.text(ReportDate, data.settings.margin.left + 145, 20);
            //doc.setFontSize(20)
            //doc.setTextColor(0, 0, 255)
            //doc.text(custFullName, data.settings.margin.left, 20);
            //doc.setFontSize(10)
            //doc.text(custAddr, data.settings.margin.left, 30);
            //doc.text(custPhone, data.settings.margin.left, 40);

            //FOOTER
            var str = "Page " + data.pageCount;
            // Total page number plugin only available in jspdf v1.0+
            //if (typeof doc.putTotalPages === 'function') {
            //    str = str + " of " + totalPagesExp;
            //}
            doc.setFontSize(10);
            doc.text(str, data.settings.margin.left, doc.internal.pageSize.height - 10);


        };

        doc.autoTable(columns, data, {
            theme: 'grid',
            addPageContent: pageContent,
            margin: { top: 40 },

            drawCell: function (cell, data) {
                var rows = data.table.rows;
                //if (data.row.index == rows.length - 1)
                if (data.row.index == indexOfGross) {
                    doc.setFillColor(26, 188, 156);
                    doc.setFontStyle('bold');
                }
                if (data.row.index == indexOfExpense) {
                    doc.setFontStyle('bold');
                }

                //if (data.column.index== 1) {
                //    if (data.row.index % 5 === 0) {
                //        doc.rect(cell.x, cell.y, data.table.width, cell.height * 5, 'S');
                //        doc.autoTableText(data.row.index / 5 + 1 + '', cell.x + cell.width / 2, cell.y + cell.height * 5 / 2, {
                //            halign: 'center',
                //            valign: 'middle'
                //        });
                //    }
                //    return false;
                //}
            },
        });

        // Total page number plugin only available in jspdf v1.0+
        if (typeof doc.putTotalPages === 'function') {
            doc.putTotalPages(totalPagesExp);
        }
        //doc.output("dataurlnewwindow");
        window.open(doc.output('bloburl'), '_blank');
    }
</script>



<!-- JqGrid Scripts -->
<link href="~/scripts/jquery-ui-1.9.2.custom.css" rel="stylesheet" />
<link href="~/scripts/ui.jqgrid.css" rel="stylesheet" />
<script src="~/Scripts/jQuery-migrate-1.2.1-min.js"></script>
<script src="~/scripts/jQuery-migrate-1.2.1.js"></script>
<script src="~/scripts/grid.locale-en.js"></script>
<script src="~/scripts/jquery.jqgrid.min.js"></script>


<script src="~/Content/plugins/jsPDF/jspdf.debug.js"></script>
<script src="~/Content/plugins/jsPDF/jspdf.plugin.autotable.js"></script>
<script src="~/Content/plugins/jsPDF-2/faker.min.js"></script>

<link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.10.1/themes/redmond/jquery-ui.css" />